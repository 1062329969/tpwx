<?php/** * Created by yongxianghui.net. * User: wafu7969 * Date: 2018/1/11 * 会员相关 登录注册等 */namespace app\index\controller;use app\index\model\SmslogModel;use app\index\model\UserInfoModel;use think\Cookie;use think\Session;use app\index\event\Message;use think\Db;class Member extends Wap{    protected function _initialize(){        //获得授权        $this->getUserInfo();        $this->assign('fansInfo',$this->fansInfo);    }    //登录注册选择页    public function alllogin(){        return $this->fetch();    }    public function starpage(){        $starpage = Db::name('starpage')->find(1);        if($starpage['sp_state']!=1 || $starpage['sp_openstate']!=1){            $this->redirect(url('index/home'));        }        $d = Cookie::get('starpagecookie');        if($d<intval(date('d'))){            Cookie::set('starpagecookie',date('d',time()));        }else{            $this->redirect(url('index/home'));        }        $starpageimg = Db::name('starpageimg')->where(['spi_spid'=>1])->order('spi_order asc')->select();        $this->assign('starpage',$starpage);        $this->assign('starpageimg',$starpageimg);        $this->assign('starpageimgcount',count($starpageimg));        return $this->fetch();    }    //登录页面    public function login()    {        if(Session::has('loginId'))        {            $this->redirect(url('index/home'));        }        $request=request();        if($request->method()=='POST')        {            $data = input('post.');            $result = $this->validate($data, 'ValidateClass.CK37');            if (true !== $result) {                // 验证失败 输出错误信息                //$this->error($result);                return array('code' => 0, 'msg' => "$result");            }            $datas['sms_mobile'] = $data['phonenum2'];            $datas['sms_type']=1;            $datas['sms_wecha_id']=$this->fansInfo['wecha_id'];            $smslog = new SmslogModel();            $sms = $smslog->where($datas)->order('sms_id desc')->find();            if(!$sms){                return array('code' => 0, 'msg' => "请先点击发送验证码");            }elseif($sms['sms_state']==1){                return array('code' => 0, 'msg' => "验证码已经被使用");            }elseif($sms['sms_addtime']+300<time()){                return array('code' => 0, 'msg' => "验证码已经失效");            }elseif($sms['sms_code']!=$data['code']) {                return array('code' => 0, 'msg' => "验证码错误");            }else{                $smslog->where(['sms_id'=>$sms['sms_id']])->update(['sms_state'=>1]);                $userInfoModel=new UserInfoModel;                $returnData=$userInfoModel->where(['phonenum'=>$data['phonenum2']])->find();  //,'id'=>$this->fansInfo['id']                //没有注册的用户直接绑定手机号                if(empty($returnData))                {                    return array('code' => 0, 'msg' => "请先注册");//                    $userInfoModel->where(['id'=>$this->fansInfo['id']])->update(['phonenum'=>$data['phonenum2']]);//                    $phone = $data['phonenum2'];//                    $visit = Db::name('visit')->where(['tel'=>$phone])->find();//                    $userInfoModel->where(['id'=>$this->fansInfo['id']])->update(['stage_type'=>$visit['cz_time']]);                }else{                    if($returnData['state']!=1){                        return array('code' => 0, 'msg' => "账号已被删除，请联系管理员",'goUrl'=>Session::get('backGoUrl'));                    }                    $openid =Session::get('openid');                    if($returnData['wecha_id']!=$openid){                        return array('code' => 0, 'msg' => "手机号与绑定微信不一致",'goUrl'=>Session::get('backGoUrl'));                    }                }                //清除验证码session数据                Session::set('telCode',null);                Session::set('tel',null);                //保存登陆状态                Session::set('phonenum',$data['phonenum2']);                Session::set('loginId',$this->fansInfo['id']);                if(!Session::has('backGoUrl'))                {                    $backGoUrl=url('index/home');                }                else                {                    $backGoUrl=Session::get('backGoUrl');                }                return array('code' => 1, 'msg' => "ok",'goUrl'=>$backGoUrl);            }        }        else        {            return $this->fetch();        }    }    //账号密码登录    public function uplogin(){        if(Session::has('loginId'))        {            $this->redirect(url('index/home'));        }else{            return $this->fetch();        }    }    //账号密码 执行登陆    public function douplogin(){        $data = input('post.');        if(!isset($data['phonenum2']) || !isset($data['password'])){            return array('code' => 0, 'msg' => "请填写用户名和密码");        }else{            $userInfoModel=new UserInfoModel;            $returnData=$userInfoModel->where(['phonenum'=>$data['phonenum2'],'password'=>md5($data['password'])])->find();  //,'id'=>$this->fansInfo['id']            // echo $userInfoModel->getLastSql();            //没有注册的用户直接绑定手机号            if(empty($returnData)){                return array('code' => 0, 'msg' => "账号密码不正确",'goUrl'=>Session::get('backGoUrl'));            }else{                $openid =Session::get('openid');                if($returnData['state']!=1){                    return array('code' => 0, 'msg' => "账号已被删除，请联系管理员",'goUrl'=>Session::get('backGoUrl'));                }                if($returnData['wecha_id']!=$openid){                    return array('code' => 0, 'msg' => "手机号与绑定微信不一致",'goUrl'=>Session::get('backGoUrl'));                }            }            //清除验证码session数据            Session::set('telCode',null);            Session::set('tel',null);            //保存登陆状态            Session::set('phonenum',$data['phonenum2']);            Session::set('loginId',$this->fansInfo['id']);            if(!Session::has('backGoUrl')){                $backGoUrl=url('index/home');            }else{                $backGoUrl=Session::get('backGoUrl');            }            return array('code' => 1, 'msg' => "ok",'goUrl'=>$backGoUrl);        }    }    //检查是否已经注册公共方法    public function checkreg(){        $userinfo = Db::name('user_info')->where(['wecha_id'=>$this->fansInfo['wecha_id']])->find();        if($userinfo['phonenum'] && $userinfo['state']==1){            return false;        }else{            return true;        }    }    //注册页面    public function reg(){        if(!$this->checkreg()){            $this->redirect(url('member/login'));        }        $data = input('param.');        if(isset($data['rd_id'])){            $this->assign('rd_id',$data['rd_id']);        }        return $this->fetch();    }    //注册提交页面    public function regsub(){        if(!$this->checkreg()){            $this->redirect(url('member/login'));        }        $data = input('get.');        if(!$data['sex'] || !$data['birthday']){            $this->redirect(url('member/reg'));        }else{            $this->assign('data',$data);            return $this->fetch();        }    }    //执行注册页面    public function doreg()    {        if(!$this->checkreg()){            $this->error('您微信已注册。',url('member/login'));        }        $request=request();        if($request->method()=='POST'){            $data = input('post.');            $result = $this->validate(                [                    'tel' => $data['phonenum2'],                    'birth' => $data['birthday'],                    'sex' => $data['sex'],                    'code' => $data['code'],                ],                [                    'tel' => 'require|length:11',                    'birth' => 'require',                    'sex' => 'require|number',                    'code' => 'require|number',                ]);            if(!$result){                $this->error('请正确填写信息。');            }            $datas['sms_mobile'] = $data['phonenum2'];            $datas['sms_type']=4;            $datas['sms_wecha_id']=$this->fansInfo['wecha_id'];            $smslog = new SmslogModel();            $sms = $smslog->where($datas)->order('sms_id desc')->find();            // var_dump($sms);die;            if(!$sms){                $this->error('请先点击发送验证码');            }elseif($sms['sms_state']==1){                $this->error('验证码已经被使用');            }elseif($sms['sms_addtime']+300<time()){                $this->error('验证码已经失效');            }elseif($sms['sms_code']!=$data['code']) {                $this->error('验证码错误');            }else{                $smslog->where(['sms_id'=>$sms['sms_id']])->update(['sms_state'=>1]);                $regdata=array(                    'phonenum'=>$data['phonenum2'],                    'birthday'=>strtotime($data['birthday']),                    'sex'=>$data['sex'],                    'state'=>1                );                if(isset($data['rd_id'])){                    $regdata['fordoctor'] = $data['rd_id'];                    Session::set('rd_id',$data['rd_id']);                }                //清除验证码session数据                Session::set('telCode',null);                Session::set('tel',null);                $vipclass = Db::name('vipclass')->where(['vc_isdefault'=>1])->find();                if(!$vipclass){                    $vipclass = Db::name('vipclass')->find(1);                }                $regdata['vipclass'] = $vipclass['vc_id'];                //记录手机号码                $userInfoModel=new UserInfoModel;                if($userInfoModel->where(['id'=>$this->fansInfo['id']])->update($regdata)){                    $phone = $data['phonenum2'];                    $visit = Db::name('visit')->where(['tel'=>$phone])->find();                    $userInfoModel->where(['id'=>$this->fansInfo['id']])->update(['stage_type'=>$visit['cz_time']]);                    Session::set('phonenum',$data['phonenum2']);                    Session::set('loginId',$this->fansInfo['id']);                    $this->success('注册成功',url('index/home'));                }else{                    $this->error('注册失败');                }            }        }else{            $this->error('数据错误');        }    }    public function address()    {        $request=request();        if($request->method()=='POST')        {            $data = input('post.');            $result = $this->validate($data, 'ValidateClass.CK28');            if (true !== $result)            {                // 验证失败 输出错误信息                //$this->error($result);                return array('code'=>0,'msg'=>"$result");            }            //记录地址等信息            $userInfoModel=new UserInfoModel;            if($userInfoModel->where(['id'=>$this->fansInfo['id']])->update(['truename'=>$data['truename'],'area'=>$data['area'],'address'=>$data['address'],'tel2'=>$data['tel2'],'email'=>$data['email']]))            {                return array('code'=>1,'msg'=>"ok");            }            else            {                return array('code'=>0,'msg'=>"添加失败");            }        }        else        {            return $this->fetch();        }    }    //跳转页    public function jump()    {        $tid=input('param.tid',0);        $this->assign('tid',$tid);//        if($tid!=0 || empty(!$data['stage_type']))        if($tid!=0){            if(!Session::has('backGoUrl') || Session::get('backGoUrl')==config('domain').'/my/out.html')            {                $backGoUrl=url('index/home');            }            else            {                $backGoUrl=url('index/home');            }        }        else        {            $backGoUrl=url('member/login');        }        $this->assign('backGoUrl',$backGoUrl);        return $this->fetch();    }    //获得验证码    public function getCode()    {        $request=request();        if($request->method()=='POST')        {            $data = input('post.');            $result = $this->validate($data, 'ValidateClass.CK26');            if (true !== $result)            {                return array('code'=>0,'msg'=>"$result");            }            $val = $this->checksmstime($data['phonenum2'],1);            if(!$val){                return array('code'=>0,'msg'=>'请等待时间60秒后重新发送！');            }            //随机6位验证码            $rand=rand(111111,999999);            Session::set('telCode',$rand);           //记录验证码            Session::set('tel',$data['phonenum2']);   //记录发送验证码的手机号码            $code['phone']=$data['phonenum2'];            $codeCont=config('codeCont');            $code['content']=str_replace('{code}',$rand,$codeCont);            $message=new Message();            @$return=$message->APIHttpRequestCURL($code,'get');            // var_dump($return);die;            if($return['status']==0)            {                $arr = array(                    'sms_code' =>$rand,                    'sms_mobile' =>$data['phonenum2'],                    'sms_addtime' =>time(),                    'sms_state' =>0,                    'sms_wecha_id' =>$this->fansInfo['wecha_id'],                    'sms_returnstatus' =>json_encode($return),                    'sms_type' =>1,                );                $smslog = new SmslogModel();                $smslog->allowField(true)->save($arr);                return array('code'=>1);            }            else            {                return array('code'=>0,'msg'=>'短信接口错误！');            }        }    }    //获得注册验证码    public function getregCode()    {        $request=request();        if($request->method()=='POST')        {            $data = input('post.');            $result = $this->validate($data, 'ValidateClass.CK26');            if (true !== $result)            {                return array('code'=>0,'msg'=>"$result");            }            $val = $this->checksmstime($data['phonenum2'],4);            if(!$val){                return array('code'=>0,'msg'=>'请等待时间60秒后重新发送！');            }            //随机6位验证码            $rand=rand(111111,999999);            Session::set('telCode',$rand);           //记录验证码            Session::set('tel',$data['phonenum2']);   //记录发送验证码的手机号码            $code['phone']=$data['phonenum2'];            $codeCont=config('codeCont');            $code['content']=str_replace('{code}',$rand,$codeCont);            $message=new Message();            @$return=$message->APIHttpRequestCURL($code,'get');            if($return['status']==0)            {                $arr = array(                    'sms_code' =>$rand,                    'sms_mobile' =>$data['phonenum2'],                    'sms_addtime' =>time(),                    'sms_state' =>0,                    'sms_wecha_id' =>$this->fansInfo['wecha_id'],                    'sms_returnstatus' =>json_encode($return),                    'sms_type' =>4,                );                $smslog = new SmslogModel();                $smslog->allowField(true)->save($arr);                return array('code'=>1);            }            else            {                return array('code'=>0,'msg'=>'短信接口错误！');            }        }    }    //getpass忘记密码    public function getpass()    {        if($this->checkreg()){//没有注册            $this->error('您微信号还没有注册为会员，请先注册',url('member/reg'));        }        $phonenum = Db::name('user_info')->where(['wecha_id'=>$this->fansInfo['wecha_id']])->field('phonenum')->find();        $this->assign('phonenum',$phonenum);        return $this->fetch();    }    public function getpasscheckcode(){        $data = input('post.');        if(!$data['code']){            $this->error('数据错误');        }        $phonenum = Db::name('user_info')->where(['wecha_id'=>$this->fansInfo['wecha_id']])->field('phonenum')->find();        $datas['sms_mobile'] = $phonenum['phonenum'];        $datas['sms_type']=5;        $datas['sms_wecha_id']=$this->fansInfo['wecha_id'];        $smslog = new SmslogModel();        $sms = $smslog->where($datas)->order('sms_id desc')->find();// var_dump($sms);die;        if(!$sms){            $this->error('请先点击发送验证码');        }elseif($sms['sms_code']!=$data['code']) {            $this->error('验证码错误');        }elseif($sms['sms_state']==1){            $this->error('验证码已经被使用');        }elseif($sms['sms_addtime']+300<time()){            $this->error('验证码已经失效');        }else{            $smslog->where(['sms_id'=>$sms['sms_id']])->update(['sms_state'=>1]);            Session::set('getpasscheckcode',passport_encrypt($this->fansInfo['wecha_id'],'yongxh'));            $this->redirect(url('member/setpass'));        }    }//展示修改密码页面    public function setpass(){        $se = Session::get('getpasscheckcode');        if(passport_decrypt($se,'yongxh')!=$this->fansInfo['wecha_id']){            Session::delete('getpasscheckcode');            $this->redirect(url('member/getpass'));        }else{            return $this->fetch();        }    }//正式修改密码    public function dosetpass(){        $se = Session::get('getpasscheckcode');        if(passport_decrypt($se,'yongxh')!=$this->fansInfo['wecha_id']){            Session::delete('getpasscheckcode');            $this->redirect(url('member/getpass'));        }        $data = input('post.');        if(!$data['pass'] || !$data['confirmpass']){            $this->redirect(url('member/getpass'));        }else{            $res = Db::name('user_info')->where(['wecha_id'=>$this->fansInfo['wecha_id']])->update(['password'=>md5($data['pass'])]);            // echo DB::getLastSql();die;            if($res){                Session::delete('getpasscheckcode');                $this->success('修改成功，请登录',url('member/login'));            }else{                Session::delete('getpasscheckcode');                $this->error('修改失败',url('member/getpass'));            }        }    }    //获取找回密码验证码    public function getpasscode(){        $request=request();        if($request->method()=='POST')        {            $phonenum = Db::name('user_info')->where(['wecha_id'=>$this->fansInfo['wecha_id']])->field('phonenum')->find();            $val = $this->checksmstime($phonenum['phonenum'],5);            if(!$val){                return array('code'=>0,'msg'=>'请等待时间60秒后重新发送！');            }            //随机6位验证码            $rand=rand(111111,999999);            Session::set('telCode',$rand);           //记录验证码            Session::set('tel',$phonenum['phonenum']);   //记录发送验证码的手机号码            $code['phone']=$phonenum['phonenum'];            $codeCont=config('codeCont');            $code['content']=str_replace('{code}',$rand,$codeCont);            $message=new Message();            @$return=$message->APIHttpRequestCURL($code,'get');            // var_dump($return);die;            if($return['status']==0){                $arr = array(                    'sms_code' =>$rand,                    'sms_mobile' =>$phonenum['phonenum'],                    'sms_addtime' =>time(),                    'sms_state' =>0,                    'sms_wecha_id' =>$this->fansInfo['wecha_id'],                    'sms_returnstatus' =>json_encode($return),                    'sms_type' =>5,                );                $smslog = new SmslogModel();                $smslog->allowField(true)->save($arr);                return array('code'=>1);            }else{                return array('code'=>0,'msg'=>'短信接口错误！');            }        }    }    //注册协议    public function protocol()    {        $protocol=Db::name('protocol')->find(1);        $this->assign('protocol',$protocol);        return $this->fetch();    }    private function checksmstime($mobile,$type){        $smslog = new SmslogModel();        $smsinfo = $smslog->where(['sms_mobile'=>$mobile,'sms_type'=>$type,'sms_state'=>0])->find();        if($smsinfo){            if(($smsinfo['sms_addtime']+60)>time()){                return false;            }else{                return true;            }        }else{            return true;        }    }}